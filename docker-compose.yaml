version: "3.6"
services:
  # API Gateway
  gateway:
    build: "./gateway"
    ports:
      - "5000:5000"
    networks:
      - frontend
      - backend
    restart: always
  # Reverse Proxy
  app:
    build: "./frontend"
    ports:
      - "80:80"
    depends_on:
      - gateway
      - prometheus
      - grafana
    networks:
      - frontend
    restart: always
  # User Service DB
  # userservice-db:
  #   image: mysql
  #   ports:
  #     - "3307:3306"
  #   volumes:
  #     - userservice-mysql:/var/lib/mysql
  #     - ./services/userService/db/schema:/docker-entrypoint-initdb.d
  #   command: --default-authentication-plugin=mysql_native_password
  #   # restart: always
  #   networks:
  #     - backend
  #   environment:
  #     - MYSQL_ROOT_USER=root
  #     - MYSQL_ROOT_PASSWORD=password
  #     - MYSQL_DATABASE=userservicedb
  #     - MYSQL_USER=entrytask
  #     - MYSQL_PASSWORD=password
  #   healthcheck:
  #     test: ["CMD", 'mysqladmin', 'ping', '-h', 'localhost', '-u', 'root', '-p$$MYSQL_ROOT_PASSWORD' ]
  #     timeout: 20s
  #     retries: 10
  # User Service
  userservice:
    build: "./services/userService"
    ports:
      - "6000:6000"
    networks:
      - backend
    depends_on:
    #   - userservice-db
      - prometheus
      - grafana
    restart: always
  itemservice-cache:
    image: redis:6.2-alpine
    networks:
      - backend
    ports:
      - '6380:6379'
    volumes: 
      - itemservice-redis:/data
    restart: always
    # depends_on:
    #   - prometheus
    #   - grafana
  # itemservice-db:
  #   image: mysql
  #   networks:
  #     - backend
  #   ports:
  #     - "3308:3306"
  #   command: --default-authentication-plugin=mysql_native_password
  #   # restart: always
  #   volumes:
  #     - ./services/itemService/db/schema:/docker-entrypoint-initdb.d
  #     - itemservice-mysql:/var/lib/mysql
  #   environment:
  #     - MYSQL_ROOT_USER=root
  #     - MYSQL_ROOT_PASSWORD=password
  #     - MYSQL_DATABASE=itemservicedb
  #     - MYSQL_USER=entrytask
  #     - MYSQL_PASSWORD=password
  #   healthcheck:
  #     test: ["CMD", 'mysqladmin', 'ping', '-h', 'localhost', '-u', 'root', '-p$$MYSQL_ROOT_PASSWORD' ]
  #     timeout: 20s
  #     retries: 10    
  # Item Service
  itemservice:
    build: "./services/itemService"
    ports:
      - "7000:7000"
    networks:
      - backend
    depends_on:
      - itemservice-cache
      - prometheus
      - grafana
      # - itemservice-db
    restart: always

  prometheus:
    container_name: prometheus
    hostname: prometheus
    image: prom/prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      # - ./alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    # links:
    #   - cadvisor:cadvisor
    #   - alertmanager:alertmanager
    ports:
      - 9090:9090
    # depends_on:
    #   - cadvisor
    # network: backend

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - '^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
    ports:
      - 9100:9100
    restart: always
    deploy:
      mode: global
    # network: backend

  # analyses and exposes resource usage and performance data from running containers
  # cadvisor:
  #   command:
  #   - privileged=true
  #   privileged: true
  #   image: gcr.io/cadvisor/cadvisor
  #   volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:rw
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  #   ports:
  #     - 8080:8080
  #   restart: always
  #   deploy:
  #     mode: global

  grafana:
    container_name: grafana
    hostname: grafana
    image: grafana/grafana
    volumes:
      - ./monitoring/grafana_datasources.yml:/etc/grafana/provisioning/datasources/all.yaml
      - ./monitoring/grafana_config.ini:/etc/grafana/config.ini
      - grafana_data:/var/lib/grafana
    ports:
      - 3000:3000
    depends_on:
      - prometheus
    # network: backend



volumes:
  # userservice-mysql:
  itemservice-redis:
  # itemservice-mysql:
  prometheus_data: {}
  grafana_data: {}

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge